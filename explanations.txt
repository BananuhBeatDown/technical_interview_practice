Your paragraph should provide your reasoning behind decisions made in the code. For example, why did you use that data structure? You also need to explain the efficiency (time and space) of your solution.


Question 1:
I used a while loop instead of a recursive solution since it simplified the problem down to comparing two strings rather than creating a separate list, dictionary, or helper function. The only new variable created was the verify integer which has a maximum size of `len(t)`. The worst time scenario would be O(n-1) since the function would never actually iterate over the whole string since single characters are not accepted as palindromes.


Question 2:
I used a recusive solution. It seemed like this is a situation where the processing time wouldn't be exponentially increased by recursion since n was continuously being reduced by either one or two characters each iteration while only checking if the first and last characters matched. The worst case scenario would be O(n) and space would be nil since no new variables were created.


Question 3:
I used for and if loops to determine the minimum spanning tree. Since each node was certain to link to at least one of the other nodes it seemed easiest to make a list of all the dictionary value touples and search for the minimum value correlated with that key. The time to look through the list will take O(n) since all values for all key will be checked. A list of tuples the length of all the individual values will be created as well as intergers to hold the minimum span value and the temporary value to add to the minimum span value. 


Question 4:
I used a recurive solution because the problem requires diving down different paths of the matrix using original function in multiple situations. I started with a helper function that would determine if a single node was a common ancestor then used that function to build the comparision. The worst time scenario would be O(n) since every row of the matrix would have to be checked, but none of them twice. No new variables are created so the space remains the same.


Question 5:
I created a helper function `get_position` within the `LinkedList` class using while loop with a counter variable to cycle through the current node and the next node until the desire positon was reached. It seemed like the most straight forward approach based on what I learned in the linked list lectures leading up to project. I also created a helper function `get_len` that would tell me the overall length of the linked list to compare to the current position since there is no function to extract that information from the class otherwise. No new variables were created so the space remains the same. The time for `question5` itself would be O(1) since it's just comparing and returning integers. but the functions themselves will have to cycle through the linked list either entirely or partially so the time could potentially be O(n^2) in the worst case scenario